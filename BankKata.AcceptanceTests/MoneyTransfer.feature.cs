// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BankKata.AcceptanceTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Successful money transfer")]
    public partial class SuccessfulMoneyTransferFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MoneyTransfer.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Successful money transfer", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successful money transfer from a payer account to a payee account")]
        [NUnit.Framework.TestCaseAttribute("10.00", "20.00", "5.00", "5.00", "25.00", null)]
        [NUnit.Framework.TestCaseAttribute("100.00", "50.00", "50.00", "50.00", "100.00", null)]
        [NUnit.Framework.TestCaseAttribute("250.00", "100.00", "150.00", "100.00", "250.00", null)]
        public virtual void SuccessfulMoneyTransferFromAPayerAccountToAPayeeAccount(string payeeInitialBalance, string payerInitialBalance, string amountToTransfer, string payerBalance, string payeeBalance, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful money transfer from a payer account to a payee account", null, exampleTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given(string.Format("a payer account with initial balance of €{0}", payeeInitialBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
  testRunner.And(string.Format("a payee account with initial balance of €{0}", payerInitialBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
 testRunner.When(string.Format("the payer transfers €{0} to the payee", amountToTransfer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.Then(string.Format("the balance of payer account should be €{0}", payerBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
  testRunner.And(string.Format("the balance of the payee account should be €{0}", payeeBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Keep a record of the transfer for both bank accounts in a transaction history")]
        public virtual void KeepARecordOfTheTransferForBothBankAccountsInATransactionHistory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Keep a record of the transfer for both bank accounts in a transaction history", null, ((string[])(null)));
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 17
    testRunner.Given("the transfer date is 17/09/2018", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "InitialBalance"});
            table1.AddRow(new string[] {
                        "1",
                        "100.00"});
#line 18
  testRunner.And("a payer account with following details:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "InitialBalance"});
            table2.AddRow(new string[] {
                        "2",
                        "100.00"});
#line 21
  testRunner.And("a payee account with following details:", ((string)(null)), table2, "And ");
#line 24
 testRunner.When("the payer transfers €50.00 to the payee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "amount",
                        "date",
                        "fromAccountId",
                        "toAccountId"});
            table3.AddRow(new string[] {
                        "-50.00",
                        "17/09/2018",
                        "1",
                        "2"});
#line 25
 testRunner.Then("the payer account should have a transaction with following details", ((string)(null)), table3, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "amount",
                        "date",
                        "fromAccountId",
                        "toAccountId"});
            table4.AddRow(new string[] {
                        "50.00",
                        "17/09/2018",
                        "1",
                        "2"});
#line 28
  testRunner.And("the payee should have a transaction with following details", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Query a bank account\'s transaction history for any bank transfers to or from a sp" +
            "ecific account")]
        public virtual void QueryABankAccountsTransactionHistoryForAnyBankTransfersToOrFromASpecificAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Query a bank account\'s transaction history for any bank transfers to or from a sp" +
                    "ecific account", null, ((string[])(null)));
#line 32
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 33
    testRunner.Given("the transfer date is 17/09/2018", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "InitialBalance"});
            table5.AddRow(new string[] {
                        "1",
                        "100.00"});
#line 34
  testRunner.And("a payer account with following details:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "InitialBalance"});
            table6.AddRow(new string[] {
                        "2",
                        "100.00"});
#line 37
  testRunner.And("a payee account with following details:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "InitialBalance"});
            table7.AddRow(new string[] {
                        "3",
                        "50.00"});
#line 40
  testRunner.And("a third account with following details:", ((string)(null)), table7, "And ");
#line 43
 testRunner.When("the payer transfers €70.00 to the payee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
  testRunner.And("the payer transfers €30.00 to the third account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "amount",
                        "date",
                        "fromAccountId",
                        "toAccountId"});
            table8.AddRow(new string[] {
                        "-70.00",
                        "17/09/2018",
                        "1",
                        "2"});
#line 45
 testRunner.Then("querying transaction history on payer account for account number 2 should return " +
                    "the following transaction", ((string)(null)), table8, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "amount",
                        "date",
                        "fromAccountId",
                        "toAccountId"});
            table9.AddRow(new string[] {
                        "-30.00",
                        "17/09/2018",
                        "1",
                        "3"});
#line 48
  testRunner.And("querying transaction history on payer account for account number 3 should return " +
                    "the following transaction", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
